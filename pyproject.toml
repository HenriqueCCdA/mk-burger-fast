[tool.poetry]
name = "mk-burger-fast"
version = "0.1.0"
description = ""
authors = ["Henrique C. C. de Andrade <henrique.ccda@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.109.2"
uvicorn = "^0.27.1"
psycopg = "^3.1.18"
sqlalchemy = "^2.0.27"
alembic = "^1.13.1"
pydantic-settings = "^2.2.1"
gunicorn = "^21.2.0"


[tool.poetry.group.dev.dependencies]
pytest-randomly = "^3.15.0"
pytest-sugar = "^1.0.0"
pytest = "^8.0.1"
pytest-cov = "^4.1.0"
taskipy = "^1.12.2"
ipython = "^8.22.1"
ipdb = "^0.13.13"
black = "^24.2.0"
ruff = "^0.2.2"
coverage = "^7.4.2"
httpx = "^0.27.0"
mypy = "^1.8.0"
pre-commit = "^3.6.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
exclude = '''
/(
      \.eggs
    | \.git
    | \.venv
    | \.ruff_cache
    | \.pytest_cache
)/
'''

[tool.ruff]
line-length = 120

exclude = [
    ".venv"
]

src = [".", "tests"]

[tool.ruff.lint]

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]


[tool.pytest.ini_options]
addopts = "-ra -vv"
filterwarnings = "ignore::DeprecationWarning"

testpaths = [
    "tests",
    "--strict-markers",
]

markers=[
    "unit: marks unit tests",
    "integration: marks integration testes",
]


[tool.taskipy.variables]
src = "app"

[tool.taskipy.tasks]
fmt_black = {cmd="poetry run black {src} tests", help="Chamando do black.", use_vars = true}
fmt_ruff= {cmd="poetry run ruff {src} tests --fix", help="Chamando do ruff.", use_vars = true}
fmt = {cmd="task fmt_ruff && task fmt_black", help="Formatador do c√≥digo."}

lin_mypy = {cmd="mypy --package tests --package app", help="Analisador estatico de tipos."}
lin_ruff = {cmd="poetry run ruff check {src} tests", help="Linter com o Ruff.", use_vars = true}
linter = {cmd="task lin_ruff && task lin_mypy", help="Linter."}

tests = {cmd="pytest", help="Rodando os testes."}
tests_cov = {cmd="pytest --cov-report html --cov={src}", help="Rodando os testes com cobertura.", use_vars = true}

server_coverage = {cmd="python -m http.server 8001 -d htmlcov", help="Mostrando o relatorio de cobertura de teste."}

clean = {cmd="rm -rvf .ruff_cache && rm -v .coverage && rm -rfv .pytest_cache && rm -rvf htmlcov && find mk_burger -name '*.pyc' -exec rm -vf {} \\;", help="Limpa o projeto."}

db = {cmd="docker compose up database -d", help="Subindo o contanier do DB."}

server_dev = {cmd="uvicorn app.main:app --reload", help="Subindo uvicorn."}
